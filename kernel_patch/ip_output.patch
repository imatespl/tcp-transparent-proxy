diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index 131066d03..9ed70983e 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -222,8 +222,39 @@ static int ip_finish_output2(struct net *net, struct sock *sk, struct sk_buff *s
 	neigh = ip_neigh_for_gw(rt, skb, &is_v6gw);
 	if (!IS_ERR(neigh)) {
 		int res;
+		struct inet_sock *inet;
+		struct iphdr *iph;
+		struct neighbour *saddr_neigh;
+		struct rtable *rt1;
 
 		sock_confirm_neigh(skb, neigh);
+		if (skb->sk) {
+			inet = inet_sk(skb->sk);
+			if (inet->transparent) {
+				iph = ip_hdr(skb);
+				if (rt->rt_gw_family == AF_INET) {
+					saddr_neigh = ip_neigh_gw4(dev, iph->saddr);
+				}else {
+					rt1 = ip_route_output(net, iph->saddr, 0, 0, 0);
+					if (IS_ERR(rt1)) {
+						goto no_src_mac;
+					}
+					if (rt1->rt_gw_family == AF_INET)
+						saddr_neigh = ip_neigh_gw4(dev, rt1->rt_gw4);
+					else
+						saddr_neigh = ip_neigh_gw4(dev, iph->saddr);
+
+					ip_rt_put(rt1);
+				}
+				if (!IS_ERR(saddr_neigh)) {
+					res = neigh_transparent_output(neigh, saddr_neigh, skb);
+					rcu_read_unlock_bh();
+					return res;
+				}
+
+			}
+		}
+no_src_mac:
 		/* if crossing protocols, can not use the cached header */
 		res = neigh_output(neigh, skb, is_v6gw);
 		rcu_read_unlock_bh();
